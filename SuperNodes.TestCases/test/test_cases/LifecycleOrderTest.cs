namespace SuperNodes.TestCases;

using System.Collections.Generic;
using Godot;
using GoDotTest;
using Shouldly;
using SuperNodes.Types;

// SuperNode that uses a third party generator.
[SuperNode("Generator1", typeof(TestPowerUp), "Generator2")]
public partial class LifecycleOrderNode : Node {
  public override partial void _Notification(int what);
}

// We'll pretend these methods are generated by other generators.
public partial class LifecycleOrderNode : ITestCaseVerifiable {
  public void Generator1(int what) => Called.Add(nameof(Generator1));
  public void Generator2(int what) => Called.Add(nameof(Generator2));
}

[PowerUp]
public partial class TestPowerUp : Node, ITestCaseVerifiable {
  public List<string> Called { get; } = new();
  public void OnTestPowerUp(int what) => Called.Add(nameof(TestPowerUp));
}

public class LifecycleOrderTest : TestClass {
  public LifecycleOrderTest(Node testScene) : base(testScene) { }

  [Test]
  public void LifecycleHooksPreserveOrder() {
    var node = new LifecycleOrderNode();
    node._Notification((int)Node.NotificationReady);
    node.Called.ShouldBe(new[] {
      nameof(LifecycleOrderNode.Generator1),
      nameof(TestPowerUp),
      nameof(LifecycleOrderNode.Generator2)
    });
  }
}
